// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: settings.sql

package pgdb

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createSetting = `-- name: CreateSetting :one
INSERT INTO
  settings (
    id,
    notion_token,
    notion_page_id,
    meu_pluggy_client_id,
    meu_pluggy_client_secret,
    meu_pluggy_account_ids,
    user_id,
    updated_at
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING
  id, notion_token, notion_page_id, meu_pluggy_client_id, meu_pluggy_client_secret, meu_pluggy_account_ids, user_id, updated_at
`

type CreateSettingParams struct {
	ID                    string
	NotionToken           string
	NotionPageID          string
	MeuPluggyClientID     string
	MeuPluggyClientSecret string
	MeuPluggyAccountIds   []string
	UserID                string
	UpdatedAt             time.Time
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, createSetting,
		arg.ID,
		arg.NotionToken,
		arg.NotionPageID,
		arg.MeuPluggyClientID,
		arg.MeuPluggyClientSecret,
		pq.Array(arg.MeuPluggyAccountIds),
		arg.UserID,
		arg.UpdatedAt,
	)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.NotionToken,
		&i.NotionPageID,
		&i.MeuPluggyClientID,
		&i.MeuPluggyClientSecret,
		pq.Array(&i.MeuPluggyAccountIds),
		&i.UserID,
		&i.UpdatedAt,
	)
	return i, err
}

const listSettings = `-- name: ListSettings :many
SELECT
  id, notion_token, notion_page_id, meu_pluggy_client_id, meu_pluggy_client_secret, meu_pluggy_account_ids, user_id, updated_at
FROM
  settings
`

func (q *Queries) ListSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, listSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.NotionToken,
			&i.NotionPageID,
			&i.MeuPluggyClientID,
			&i.MeuPluggyClientSecret,
			pq.Array(&i.MeuPluggyAccountIds),
			&i.UserID,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSetting = `-- name: UpdateSetting :one
UPDATE
  settings
SET
  notion_token = $2,
  notion_page_id = $3,
  meu_pluggy_client_id = $4,
  meu_pluggy_client_secret = $5,
  meu_pluggy_account_ids = $6,
  updated_at = $7
WHERE
  id = $1
RETURNING
  id, notion_token, notion_page_id, meu_pluggy_client_id, meu_pluggy_client_secret, meu_pluggy_account_ids, user_id, updated_at
`

type UpdateSettingParams struct {
	ID                    string
	NotionToken           string
	NotionPageID          string
	MeuPluggyClientID     string
	MeuPluggyClientSecret string
	MeuPluggyAccountIds   []string
	UpdatedAt             time.Time
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, updateSetting,
		arg.ID,
		arg.NotionToken,
		arg.NotionPageID,
		arg.MeuPluggyClientID,
		arg.MeuPluggyClientSecret,
		pq.Array(arg.MeuPluggyAccountIds),
		arg.UpdatedAt,
	)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.NotionToken,
		&i.NotionPageID,
		&i.MeuPluggyClientID,
		&i.MeuPluggyClientSecret,
		pq.Array(&i.MeuPluggyAccountIds),
		&i.UserID,
		&i.UpdatedAt,
	)
	return i, err
}
